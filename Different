编译型语言、解释型语言、静态类型语言、动态类型语言概念与区别
最近在研究Python和Erlang。反复提到动态类型语言、动态语言、解释型语言这些概念。
这些概念很生涩，在这里做一个总结。

编译型语言和解释型语言
1、编译型语言
需通过编译器（compiler）将源代码编译成机器码，之后才能执行的语言。
一般需经过编译（compile）、链接（linker）这两个步骤。
编译是把源代码编译成机器码，链接是把各个模块的机器码和依赖库串连起来生成可执行文件。
优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，
      运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。
缺点：编译之后如果需要修改就需要整个模块重新编译。
      编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，
      需要根据运行的操作系统环境编译不同的可执行文件。
代表语言：C、C++、Pascal、Object-C以及最近很火的苹果新语言swift
2、解释型语言
解释性语言的程序不需要编译，相比编译型语言省了道工序，解释性语言在运行程序的时候才逐行翻译。
优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。
      灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。
缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。
代表语言：JavaScript、Python、Erlang、PHP、Perl、Ruby
3、混合型语言
既然编译型和解释型各有缺点就会有人想到把两种类型整合起来，取其精华去其糟粕。
就出现了半编译型语言。比如C#,C#在编译的时候不是直接编译成机器码而是中间码，
.NET平台提供了中间语言运行库运行中间码，中间语言运行库类似于Java虚拟机。
.net在编译成IL代码后，保存在dll中，首次运行时由JIT在编译成机器码缓存在内存中，
下次直接执行（博友回复指出）。我个人认为抛开一切的偏见C#是这个星球上最好的编程语言。
可惜微软的政策限制了C#的推广。

Java先生成字节码再在Java虚拟机中解释执行。
严格来说混合型语言属于解释型语言。C#更接近编译型语言。

动态语言和静态语言
1、动态语言
是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，
已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。
主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。
2、静态语言
与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。
3、注意：
很多人认为解释型语言都是动态语言，这个观点是错的！Java是解释型语言但是不是动态语言，
Java不能在运行的时候改变自己结构。反之成立吗？动态语言都是解释型语言。也是错的！
Object-C是编译型语言，但是他是动态语言。
得益于特有的run time机制（准确说run time不是语法特性是运行时环境，这里不展开）
OC代码是可以在运行的时候插入、替换方法的。

C#也是动态语言，通过C#的反射机制可以动态的插入一段代码执行。所以我说C#是这个星球最好的编程语言。

动态类型语言和静态类型语言
1、动态类型语言
很多网上资料把动态类型语言和动态语言混为一谈，简直是误人子弟。
动态类型语言和动态语言是完全不同的两个概念。
动态类型语言是指在运行期间才去做数据类型检查的语言，说的是数据类型，
动态语言说的是运行是改变结构，说的是代码结构。

动态类型语言的数据类型不是在编译阶段决定的，而是把类型绑定延后到了运行阶段。

主要语言：Python、Ruby、Erlang、JavaScript、swift、PHP、Perl。

2、静态类型语言
静态语言的数据类型是在编译其间确定的或者说运行之前确定的，
编写代码的时候要明确确定变量的数据类型。
主要语言：C、C++、C#、Java、Object-C。

3、注意：
相当一部分程序员，也包括曾经的我，认为解释型语言都是动态类型语言，编译型语言都是静态类型语言。
这个也是错的。swift是编译型语言但是它也是动态类型语言。C#和Java是解释型语言也是静态类型语言。

强类型语言和弱类型语言
1、强类型语言：

强类型语言，一旦一个变量被指定了某个数据类型，如果不经过强制类型转换，那么它就永远是这个数据类型。
你不能把一个整形变量当成一个字符串来处理。

主要语言：Java、C#、Python、Object-C、Ruby

2、弱类型语言：

数据类型可以被忽略，一个变量可以赋不同数据类型的值。
一旦给一个整型变量a赋一个字符串值，那么a就变成字符类型。

主要语言：JavaScript、PHP、C、C++（C和C++有争议，但是确实可以给一个字符变量赋整形值，
          可能初衷是强类型，形态上接近弱类型）

3、注意：

一个语言是不是强类型语言和是不是动态类型语言也没有必然联系。Python是动态类型语言，是强类型语言。
JavaScript是动态类型语言，是弱类型语言。Java是静态类型语言，是强类型语言。

如果我的理解有误，请在回复中不吝指出，谢谢。
分类: 基础概念
标签: 编译型语言, 解释型语言, 静态类型语言, 动态类型语言, 强类型语言, 弱类型语言

转自：
https://www.cnblogs.com/zy1987/p/3784753.html?utm_source=tuicool



编译型与解释型、动态语言与静态语言、强类型语言与弱类型语言的区别
 编译型和解释型

我们先看看编译型，其实它和汇编语言是一样的：也是有一个负责翻译的程序来对我们的源代码进行转换，
生成相对应的可执行代码。这个过程说得专业一点，就称为编译（Compile），
而负责编译的程序自然就称为编译器（Compiler）。如果我们写的程序代码都包含在一个源文件中，
那么通常编译之后就会直接生成一个可执行文件，我们就可以直接运行了。
但对于一个比较复杂的项目，为了方便管理，我们通常把代码分散在各个源文件中，作为不同的模块来组织。
这时编译各个文件时就会生成目标文件（Object   file）而不是前面说的可执行文件。
一般一个源文件的编译都会对应一个目标文件。这些目标文件里的内容基本上已经是可执行代码了，
但由于只是整个项目的一部分，所以我们还不能直接运行。待所有的源文件的编译都大功告成，
我们就可以最后把这些半成品的目标文件“打包”成一个可执行文件了，这个工作由另一个程序负责完成，由
于此过程好像是把包含可执行代码的目标文件连接装配起来，所以又称为链接（Link），
而负责链接的程序就叫……就叫链接程序（Linker）。链接程序除了链接目标文件外，可
能还有各种资源，像图标文件啊、声音文件啊什么的，
还要负责去除目标文件之间的冗余重复代码，等等，所以……也是挺累的。
链接完成之后，一般就可以得到我们想要的可执行文件了。 

上面我们大概地介绍了编译型语言的特点，现在再看看解释型。
噢，从字面上看，“编译”和“解释”的确都有“翻译”的意思，它们的区别则在于翻译的时机安排不大一样。打个比
方：假如你打算阅读一本外文书，而你不知道这门外语，那么你可以找一名翻译，
给他足够的时间让他从头到尾把整本书翻译好，然后把书的母语版交给你阅读；
或者，你也立刻让这名翻译辅助你阅读，让他一句一句给你翻译，如果你想往回看某个章节，他也得重新给你翻译。 

两种方式，前者就相当于我们刚才所说的编译型：一次把所有的代码转换成机器语言，然后写成可执行文件；
而后者就相当于我们要说的解释型：在程序运行的前一刻，还只有源程序而没有可执行程序；
而程序每执行到源程序的某一条指令，则会有一个称之为解释程序的外壳程序将源代码转换成二进制代码以供执行，
总言之，就是不断地解释、执行、解释、执行……所以，解释型程序是离不开解释程序的。像
早期的BASIC就是一门经典的解释型语言，要执行BASIC程序，就得进入BASIC环境，
然后才能加载程序源文件、运行。
解释型程序中，由于程序总是以源代码的形式出现，因此只要有相应的解释器，移植几乎不成问题。
编译型程序虽然源代码也可以移植，但前提是必须针对不同的系统分别进行编译，对于复杂的工程来说，
的确是一件不小的时间消耗，况且很可能一些细节的地方还是要修改源代码。
而且，解释型程序省却了编译的步骤，修改调试也非常方便，编辑完毕之后即可立即运行，
不必像编译型程序一样每次进行小小改动都要耐心等待漫长的Compiling…Linking…这样的编译链接过程。不
过凡事有利有弊，由于解释型程序是将编译的过程放到执行过程中，
这就决定了解释型程序注定要比编译型慢上一大截，像几百倍的速度差距也是不足为奇的。 

编译型与解释型，两者各有利弊。前者由于程序执行速度快，同等条件下对系统要求较低，
因此像开发操作系统、大型应用程序、数据库系统等时都采用它，
像C/C++、Pascal/Object   Pascal（Delphi）、VB等基本都可视为编译语言，
而一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、
对不同系统平台间的兼容性有一定要求的程序则通常使用解释性语言，如Java、JavaScript、VBScript、Perl、Python等等。 

但既然编译型与解释型各有优缺点又相互对立，所以一批新兴的语言都有把两者折衷起来的趋势，
例如Java语言虽然比较接近解释型语言的特征，但在执行之前已经预先进行一次预编译，
生成的代码是介于机器码和Java源代码之间的中介代码，运行的时候则由JVM（Java的虚拟机平台，可视为解释器）解释执行。
它既保留了源代码的高抽象、可移植的特点，又已经完成了对源代码的大部分预编译工作，
所以执行起来比“纯解释型”程序要快许多。而像VB6（或者以前版本）、C#这样的语言，虽
然表面上看生成的是.exe可执行程序文件，但VB6编译之后实际生成的也是一种中介码，
只不过编译器在前面安插了一段自动调用某个外部解释器的代码（该解释程序独立于用户编写的程序，
存放于系统的某个DLL文件中，所有以VB6编译生成的可执行程序都要用到它），以解释执行实际的程序体。
C#（以及其它.net的语言编译器）则是生成.net目标代码，
实际执行时则由.net解释系统（就像JVM一样，也是一个虚拟机平台）进行执行。
当然.net目标代码已经相当“低级”，比较接近机器语言了，所以仍将其视为编译语言，而
且其可移植程度也没有Java号称的这么强大，Java号称是“一次编译，到处执行”，而
.net则是“一次编码，到处编译”。呵呵，当然这些都是题外话了。总
之，随着设计技术与硬件的不断发展，编译型与解释型两种方式的界限正在不断变得模糊。

动态语言和静态语言
　　通常我们所说的动态语言、静态语言是指动态类型语言和静态类型语言。

（1）动态类型语言：动态类型语言是指在运行期间才去做数据类型检查的语言，
也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，
该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。
Python和Ruby就是一种典型的动态类型语言，其他的各种脚本语言如VBScript也多少属于动态类型语言。

（2）静态类型语言：静态类型语言与动态类型语言刚好相反，它的数据类型是在编译其间检查的，
也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等。

对于动态语言与静态语言的区分，套用一句流行的话就是：Static typing when possible, dynamic typing when needed。

强类型定义语言和弱类型定义语言

（1）强类型定义语言：强制数据类型定义的语言。
也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。
举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。

（2）弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。

强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。
另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！
例如：Python是动态语言，是强类型定义语言（类型安全的语言）; 
      VBScript是动态语言，是弱类型定义语言（类型不安全的语言）; 
      JAVA是静态语言，是强类型定义语言（类型安全的语言）。

http://www.cnblogs.com/dzhanjie/archive/2011/07/07/2100340.html
